diff -Naur a/cmake/defaults/Packages.cmake b/cmake/defaults/Packages.cmake
--- a/cmake/defaults/Packages.cmake	2020-05-10 16:53:12.086750245 +1000
+++ b/cmake/defaults/Packages.cmake	2020-05-10 16:54:15.697024801 +1000
@@ -57,33 +57,13 @@
     # as Boost_VERSION_STRING in CMake 3.14+
     set(boost_version_string "${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION}")
 
-    if (((${boost_version_string} VERSION_GREATER_EQUAL "1.67") AND
-         (${boost_version_string} VERSION_LESS "1.70")) OR
-        ((${boost_version_string} VERSION_GREATER_EQUAL "1.70") AND
-          Boost_NO_BOOST_CMAKE))
-        # As of boost 1.67 the boost_python component name includes the
-        # associated Python version (e.g. python27, python36). After boost 1.70
-        # the built-in cmake files will deal with this. If we are using boost
-        # that does not have working cmake files, or we are using a new boost
-        # and not using cmake's boost files, we need to do the below.
-        #
-        # Find the component under the versioned name and then set the generic
-        # Boost_PYTHON_LIBRARY variable so that we don't have to duplicate this
-        # logic in each library's CMakeLists.txt.
-        set(python_version_nodot "${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}")
-        find_package(Boost
-            COMPONENTS
-                python${python_version_nodot}
-            REQUIRED
-        )
-        set(Boost_PYTHON_LIBRARY "${Boost_PYTHON${python_version_nodot}_LIBRARY}")
-    else()
-        find_package(Boost
-            COMPONENTS
-                python
-            REQUIRED
-        )
-    endif()
+    set(python_version_nodot "${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}")
+    find_package(Boost
+        COMPONENTS
+            python${python_version_nodot}
+        REQUIRED
+    )
+    set(Boost_PYTHON_LIBRARY "${Boost_PYTHON${python_version_nodot}_LIBRARY}")
 
     # --Jinja2
     find_package(Jinja2)
